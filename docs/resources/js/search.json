[[{"l":"Проект","p":["Читайте дальше, чтобы узнать для кого это руководство; Чтобы ознакомится со структурой и, возможно, внести свой вклад.","Для меня как разработчика, который просто хочет поиграть в монополию, этот проект изначально был чем-то вроде хобби. Я не пытаюсь кого-то удивить или превзойти. Я просто делаю то, что мне нравится."]}],[{"l":"Пособие по созданию команд","p":["Команда — это слово или фраза, которая сигнализирует о том, что необходимо выполнить заранее созданные инструкции. Выполнить слэш-команду — означает отреагировать на действия пользователя вызвавшего её — выполнить код и обязательно отправить ответ.","Все команды находятся по пути ~/src/commands. Это JavaScript файлы, которые автоматически импортируются. Каждый из них обязан экспортировать класс с именем Command. О содержимом которого поговорим в главе \"Тело команды\".","Список доступных команд также хранится на стороне Дискорда. Чтобы эти команды отображались, этот список требуется обновлять: см. скрипт ~/scripts/refreshCommands"]},{"l":"Терминология","p":["Interaction— взаимодействие. Контекст содержащий максимально возможные данные о взаимодействии пользователя с командой, кнопкой или модальным окном. Slash— слэш-команда. Component— кнопка, или подобный кнопке элемент с которым может работать пользователь. Modal— всплывающее окно, которое можно вызвать ответом на взаимодействие."]},{"l":"Тело команды","p":["На момент v1.0 основа команды состоит из двух методов: onSlashInteraction& onComponentInteraction и одного статического свойства хранящего параметры — options.","В каталоге commands находится файл .snippet.js — это минимальный фрагмент с кодом, который рекомендуется копировать как основу при создании новых команд."]},{"l":"Как отправить ответ","p":["Как было сказано ранее, ответ отправить надо, иначе пользователь и Вы увидите ошибку. Отправка происходит через взаимодействие с объектом interaction. Вам нужно через него отправить сообщение или отобразить модальное окно. Минимальный пример:","Используйте утилиту CreateMessage для генерации сообщений!"]},{"l":"Как создать компонент","p":["Компоненты можно прикрепить к сообщению или к модельному окну. В обоих случаях требуется установить \"строку компонентов\". При использовании CreateMessage и CreateModal это происходит автоматически.","Каждый из компонентов имеет уникальные свойства, которые должны быть указаны. Найти их можно по ссылке.","Если Вы хотите передать несколько компонентов, оберните их в массив.","Обязательное поле customId содержит информацию для будущей обработки взаимодействия. Так, для вызова onComponentInteraction необходимо, чтобы customId начинался строкой @command/имя_команды."]},{"l":"Советы по стилю кода","p":["Создавайте отдельные классы для логики команды. Экспортируемый класс Command используйте только как средство получения взаимодействий и ответов на них.","Генерацию сообщений по возможности стоит выносить в отдельную/отдельные функции."]},{"i":"нюансы-о-которых-стоит-знать","l":"Нюансы о которых стоит знать:","p":["*Стартовая точка приложения, которая получает данные об взаимодействии — это событие получаемое в app.client.on(), \"createInteraction\". Данные передаются в обработчик ~/events/interactionCreate.js, который по возможности вызывает один из методов: onSlashInteraction или onComponentInteraction соответствующей команды.","* CreateMessage и CreateModal для трансформации компонентов используют утилиту SimplifyComponents"]}],[{"l":"Установка и запуск","p":["Чтобы запустить бота так, чтобы он корректно работал требуется выполнить три шага:","Сохранить проект локально себе на компьютер.","Установить все зависимости с помощью вызова команды пакетного менеджера.","Указать \"переменные среды\". Это необходимые для запуска данные, которые должны быть установлены каждым пользователем отдельно.","Кроме того у Вас должна быть установлена версия Node.js 18 или выше."]},{"l":"Вы будете работать с терминалом","p":["Другие назв.: командная строка, cmd. Потребуются умения: Запускать командную строку; Перемещаться по файловой системе с помощью команды cd(с англ. \"change directory\"); Переписывать и выполнять примеры ниже.","Гайд по работе с cmd."]},{"i":"установка-проекта-на-компьютер","l":"Установка проекта на компьютер:","p":["Во-первых, не паникуйте, на выбор предлагается целых ДВА варианта:","Воспользоваться интерфейсом GitHub.","Выбрать git. Это многофункциональная программа с которой работают через терминал.","А во-вторых, существует куча неординарных способов это сделать. Сломай систему! Как загрузить файлы через GitHub Основы работы с Git"]},{"i":"установка-зависимостей-пакетов-модулей","l":"Установка зависимостей (пакетов, модулей):","p":["Для того, чтобы использовать один и тот же код множество раз, придумали общедоступный реестр пакетов. Один из плюсов которого — зависимости не занимают место на диске до того как будут установлены.","То есть нам надо самим их установить. Для этого существует NPM — пакетный менеджер, который устанавливается вместе с Node.js. Проверить его наличие можно введя в терминале npm -v. Если его нет, исправьте."]},{"i":"команда-в-терминале","l":"Команда в терминале:","p":["npm install(или сокращённо npm i)","Это установит зависимости. Также у Вас появится каталог в папке проекта: node_modules. Где они и будут храниться. В случае чего этот каталог можно удалить."]},{"l":"Переменные среды","p":["Как было сказано ранее, переменные среды — это информация, которая привязана к среде выполнения программы, а именно к системе. Однако нет необходимости лезть в недра компьютера, чтобы поменять непонятно-что. Нет, совсем нет. Хотя именно это Вы и можете сделать, если хотите.","На деле достаточно создать соответствующий файл в корневой папке проекта:.env(от сл. environment) Возможно, этот файл уже создан, и тогда Вам остаётся только заполнить в нём поля.","(не дописано)"]}]]